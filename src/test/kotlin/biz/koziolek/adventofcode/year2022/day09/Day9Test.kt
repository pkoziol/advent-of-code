package biz.koziolek.adventofcode.year2022.day09

import biz.koziolek.adventofcode.Coord
import biz.koziolek.adventofcode.findInput
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

@Tag("2022")
internal class Day9Test {

    private val sampleInput = """
            R 4
            U 4
            L 3
            D 1
            R 4
            D 1
            L 5
            R 2
        """.trimIndent().split("\n")

    @Test
    fun testSimpleMoves() {
        val corners1 = Coord(0, 0) to Coord(4, 2)
        val rope1 = PlanckRope(
            head = Coord(x = 2, y = 1),
            tail = Coord(x = 1, y = 1),
        )
        assertEquals(
            """
                .....
                .TH..
                .....
            """.trimIndent(),
            visualizeRope(rope1, corners1)
        )

        val movedRope1 = rope1.move(Move.RIGHT)
        assertEquals(Coord(x = 3, y = 1), movedRope1.head)
        assertEquals(Coord(x = 2, y = 1), movedRope1.tail)
        assertEquals(
            """
                .....
                ..TH.
                .....
            """.trimIndent(),
            visualizeRope(movedRope1, corners1)
        )

        val corners2 = Coord(0, 0) to Coord(2, 4)
        val rope2 = PlanckRope(
            head = Coord(x = 1, y = 2),
            tail = Coord(x = 1, y = 3),
        )
        assertEquals(
            """
                ...
                .T.
                .H.
                ...
                ...
            """.trimIndent(),
            visualizeRope(rope2, corners2)
        )

        val movedRope2 = rope2.move(Move.DOWN)
        assertEquals(Coord(x = 1, y = 1), movedRope2.head)
        assertEquals(Coord(x = 1, y = 2), movedRope2.tail)
        assertEquals(
            """
                ...
                ...
                .T.
                .H.
                ...
            """.trimIndent(),
            visualizeRope(movedRope2, corners2)
        )
    }

    @Test
    fun testDiagonalMoves() {
        val corners = Coord(0, 0) to Coord(4, 4)
        val rope = PlanckRope(
            head = Coord(x = 2, y = 2),
            tail = Coord(x = 1, y = 1),
        )
        assertEquals(
            """
                .....
                .....
                ..H..
                .T...
                .....
            """.trimIndent(),
            visualizeRope(rope, corners)
        )

        val movedRope1 = rope.move(Move.UP)
        assertEquals(Coord(x = 2, y = 3), movedRope1.head)
        assertEquals(Coord(x = 2, y = 2), movedRope1.tail)
        assertEquals(
            """
                .....
                ..H..
                ..T..
                .....
                .....
            """.trimIndent(),
            visualizeRope(movedRope1, corners)
        )

        val movedRope2 = rope.move(Move.RIGHT)
        assertEquals(Coord(x = 3, y = 2), movedRope2.head)
        assertEquals(Coord(x = 2, y = 2), movedRope2.tail)
        assertEquals(
            """
                .....
                .....
                ..TH.
                .....
                .....
            """.trimIndent(),
            visualizeRope(movedRope2, corners)
        )
    }

    @Test
    fun testCoveringMoves() {
        val corners = Coord(0, 0) to Coord(4, 2)
        val rope1 = PlanckRope(
            head = Coord(x = 1, y = 1),
            tail = Coord(x = 1, y = 1),
        )
        assertEquals(
            """
                .....
                .H...
                .....
            """.trimIndent(),
            visualizeRope(rope1, corners)
        )

        val rope2 = rope1.move(Move.RIGHT)
        assertEquals(Coord(x = 2, y = 1), rope2.head)
        assertEquals(Coord(x = 1, y = 1), rope2.tail)
        assertEquals(
            """
                .....
                .TH..
                .....
            """.trimIndent(),
            visualizeRope(rope2, corners)
        )

        val rope3 = rope2.move(Move.LEFT)
        assertEquals(Coord(x = 1, y = 1), rope3.head)
        assertEquals(Coord(x = 1, y = 1), rope3.tail)
        assertEquals(
            """
                .....
                .H...
                .....
            """.trimIndent(),
            visualizeRope(rope3, corners)
        )
    }

    @Test
    fun testParseMoves() {
        val moves = parseMoves(sampleInput)
        assertEquals(4 + 4 + 3 + 1 + 4 + 1 + 5 + 2, moves.size)
        assertEquals(Move.RIGHT, moves[0])
        assertEquals(Move.RIGHT, moves[1])
        assertEquals(Move.RIGHT, moves[2])
        assertEquals(Move.RIGHT, moves[3])
        assertEquals(Move.UP, moves[4])
    }

    @Test
    fun testSampleMoves() {
        val corners = Coord(0, 0) to Coord(5, 4)
        val rope = PlanckRope()
        val moves = parseMoves(sampleInput)
        
        val expectedStates = """
            ......
            ......
            ......
            ......
            H.....

            ......
            ......
            ......
            ......
            TH....

            ......
            ......
            ......
            ......
            sTH...

            ......
            ......
            ......
            ......
            s.TH..

            ......
            ......
            ......
            ......
            s..TH.

            ......
            ......
            ......
            ....H.
            s..T..

            ......
            ......
            ....H.
            ....T.
            s.....

            ......
            ....H.
            ....T.
            ......
            s.....

            ....H.
            ....T.
            ......
            ......
            s.....

            ...H..
            ....T.
            ......
            ......
            s.....

            ..HT..
            ......
            ......
            ......
            s.....

            .HT...
            ......
            ......
            ......
            s.....

            ..T...
            .H....
            ......
            ......
            s.....

            ..T...
            ..H...
            ......
            ......
            s.....

            ..T...
            ...H..
            ......
            ......
            s.....

            ......
            ...TH.
            ......
            ......
            s.....

            ......
            ....TH
            ......
            ......
            s.....

            ......
            ....T.
            .....H
            ......
            s.....

            ......
            ....T.
            ....H.
            ......
            s.....

            ......
            ....T.
            ...H..
            ......
            s.....

            ......
            ......
            ..HT..
            ......
            s.....

            ......
            ......
            .HT...
            ......
            s.....

            ......
            ......
            HT....
            ......
            s.....

            ......
            ......
            .H....
            ......
            s.....

            ......
            ......
            .TH...
            ......
            s.....
        """.trimIndent().split("\n\n")


        val allMovedRopes = moveRopeInSteps(rope, moves)
        assertEquals(expectedStates, allMovedRopes.map { visualizeRope(it, corners, markStart = true) })
    }

    @Test
    fun testSampleAnswer1() {
        val rope = PlanckRope()
        val moves = parseMoves(sampleInput)
        val allMovedRopes = moveRopeInSteps(rope, moves)

        assertEquals(13, countPositionsVisitedByTail(allMovedRopes))
    }

    @Test
    @Tag("answer")
    fun testAnswer1() {
        val input = findInput(object {}).bufferedReader().readLines()
        val rope = PlanckRope()
        val moves = parseMoves(input)
        val allMovedRopes = moveRopeInSteps(rope, moves)

        assertEquals(6090, countPositionsVisitedByTail(allMovedRopes))
    }
}
