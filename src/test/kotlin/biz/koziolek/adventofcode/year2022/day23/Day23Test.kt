package biz.koziolek.adventofcode.year2022.day23

import biz.koziolek.adventofcode.Coord
import biz.koziolek.adventofcode.findInput
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

@Tag("2022")
internal class Day23Test {

    private val sampleInput1 = """
            .....
            ..##.
            ..#..
            .....
            ..##.
            .....
        """.trimIndent().split("\n")

    private val sampleInput2 = """
            ..............
            ..............
            .......#......
            .....###.#....
            ...#...#.#....
            ....#...##....
            ...#.###......
            ...##.#.##....
            ....#..#......
            ..............
            ..............
            ..............
        """.trimIndent().split("\n")

    @Test
    fun testParseElves() {
        val elves1 = parseElves(sampleInput1)
        assertEquals(5, elves1.size)

        val elves2 = parseElves(sampleInput2)
        assertEquals(22, elves2.size)
    }

    @Test
    fun testVisualizeElves() {
        val elves1 = parseElves(sampleInput1)
        assertEquals(
            """
                ##
                #.
                ..
                ##
            """.trimIndent(),
            visualizeElves(elves1)
        )
        val corners1 = Coord(0, 0) to Coord(4, 5)
        assertEquals(
            """
                .....
                ..##.
                ..#..
                .....
                ..##.
                .....
            """.trimIndent(),
            visualizeElves(elves1, corners1)
        )

        val elves2 = parseElves(sampleInput2)
        val corners2 = Coord(0, 0) to Coord(13, 11)
        assertEquals(
            """
                ..............
                ..............
                .......#......
                .....###.#....
                ...#...#.#....
                ....#...##....
                ...#.###......
                ...##.#.##....
                ....#..#......
                ..............
                ..............
                ..............
            """.trimIndent(),
            visualizeElves(elves2, corners2)
        )
    }

    @Test
    fun testMoveElves() {
        val elves1 = parseElves(sampleInput1)
        val corners1 = Coord(0, 0) to Coord(4, 5)
        val expectedPlacement1 = mapOf(
            1 to """
                ..##.
                .....
                ..#..
                ...#.
                ..#..
                .....
            """.trimIndent(),
            2 to """
                .....
                ..##.
                .#...
                ....#
                .....
                ..#..
            """.trimIndent(),
            3 to """
                ..#..
                ....#
                #....
                ....#
                .....
                ..#..
            """.trimIndent(),
        )
        assertElvesMovement(elves1, expectedPlacement1, corners1, "First sample")

        val elves2 = parseElves(sampleInput2)
        val corners2 = Coord(0, 0) to Coord(13, 11)
        val expectedPlacement2 = mapOf(
            1 to """
                ..............
                .......#......
                .....#...#....
                ...#..#.#.....
                .......#..#...
                ....#.#.##....
                ..#..#.#......
                ..#.#.#.##....
                ..............
                ....#..#......
                ..............
                ..............
            """.trimIndent(),
            2 to """
                ..............
                .......#......
                ....#.....#...
                ...#..#.#.....
                .......#...#..
                ...#..#.#.....
                .#...#.#.#....
                ..............
                ..#.#.#.##....
                ....#..#......
                ..............
                ..............
            """.trimIndent(),
            3 to """
                ..............
                .......#......
                .....#....#...
                ..#..#...#....
                .......#...#..
                ...#..#.#.....
                .#..#.....#...
                .......##.....
                ..##.#....#...
                ...#..........
                .......#......
                ..............
            """.trimIndent(),
            4 to """
                ..............
                .......#......
                ......#....#..
                ..#...##......
                ...#.....#.#..
                .........#....
                .#...###..#...
                ..#......#....
                ....##....#...
                ....#.........
                .......#......
                ..............
            """.trimIndent(),
            5 to """
                .......#......
                ..............
                ..#..#.....#..
                .........#....
                ......##...#..
                .#.#.####.....
                ...........#..
                ....##..#.....
                ..#...........
                ..........#...
                ....#..#......
                ..............
            """.trimIndent(),
            10 to """
                .......#......
                ...........#..
                ..#.#..#......
                ......#.......
                ...#.....#..#.
                .#......##....
                .....##.......
                ..#........#..
                ....#.#..#....
                ..............
                ....#..#..#...
                ..............
            """.trimIndent(),
        )
        assertElvesMovement(elves2, expectedPlacement2, corners2, "Second sample")
    }

    private fun assertElvesMovement(
        elves: Set<Coord>,
        expectedPlacement: Map<Int, String>,
        corners: Pair<Coord, Coord>,
        message: String
    ) {
        for ((round, expectedStr) in expectedPlacement) {
            val movedElves = moveElves(elves, rounds = round)
            assertEquals(
                expectedStr,
                visualizeElves(movedElves, corners),
                "$message, round $round"
            )
        }
    }

    @Test
    fun testCountEmptyGround() {
        val elves2 = parseElves("""
            .......#......
            ...........#..
            ..#.#..#......
            ......#.......
            ...#.....#..#.
            .#......##....
            .....##.......
            ..#........#..
            ....#.#..#....
            ..............
            ....#..#..#...
            ..............
        """.trimIndent().split("\n"))
        assertEquals(110, countEmptyGround(elves2))
    }

    @Test
    @Tag("answer")
    fun testAnswer1() {
        val input = findInput(object {}).bufferedReader().readLines()
        val elves = parseElves(input)
        val movedElves = moveElves(elves, rounds = 10)
        assertEquals(3864, countEmptyGround(movedElves))
    }
}
