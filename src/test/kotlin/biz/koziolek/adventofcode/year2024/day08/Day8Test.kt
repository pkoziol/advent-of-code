package biz.koziolek.adventofcode.year2024.day08

import biz.koziolek.adventofcode.AsciiColor
import biz.koziolek.adventofcode.findInput
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Tag
import org.junit.jupiter.api.Test

@Tag("2024")
internal class Day8Test {

    private val sampleInputA = """
            ............
            ........0...
            .....0......
            .......0....
            ....0.......
            ......A.....
            ............
            ............
            ........A...
            .........A..
            ............
            ............
        """.trimIndent()

    private val expectedOutputA = """
            ......#....#
            ...#....0...
            ....#0....#.
            ..#....0....
            ....0....#..
            .#....A.....
            ...#........
            #......#....
            ........A...
            .........A..
            ..........#.
            ..........#.
        """.trimIndent()

    private val sampleInputB = """
            ..........
            ..........
            ..........
            ....a.....
            ........a.
            .....a....
            ..........
            ......A...
            ..........
            ..........
        """.trimIndent()

    private val expectedOutputB = """
            ..........
            ...#......
            #.........
            ....a.....
            ........a.
            .....a....
            ..#.......
            ......A...
            ..........
            ..........
        """.trimIndent()

    @Test
    fun testParse() {
        val map = parseAntennasMap(sampleInputA.split("\n"))
        assertEquals(12, map.width)
        assertEquals(12, map.height)
        assertEquals(4, map.countUnique('0'))
        assertEquals(3, map.countUnique('A'))
        assertEquals(sampleInputA, AsciiColor.cleanUp(map.toString()))
    }

    @Test
    fun testSampleAnswer1A() {
        val map = parseAntennasMap(sampleInputA.split("\n"))
        val mapWithAntinodes = map.addAntinodes()
        assertEquals(expectedOutputA, AsciiColor.cleanUp(mapWithAntinodes.toString()))
        assertEquals(14, mapWithAntinodes.countUnique('#'))
    }

    @Test
    fun testSampleAnswer1B() {
        val map = parseAntennasMap(sampleInputB.split("\n"))
        val mapWithAntinodes = map.addAntinodes()
        assertEquals(expectedOutputB, AsciiColor.cleanUp(mapWithAntinodes.toString()))
        assertEquals(4, mapWithAntinodes.countUnique('#'))
    }

    @Test
    @Tag("answer")
    fun testAnswer1() {
        val input = findInput(object {}).bufferedReader().readLines()
        val map = parseAntennasMap(input)
        val mapWithAntinodes = map.addAntinodes()
        val antinodeCount = mapWithAntinodes.countUnique('#')
//        println(mapWithAntinodes)
        assertNotEquals(389, antinodeCount)
        assertTrue(antinodeCount < 389)
        assertEquals(376, antinodeCount)
    }
}
